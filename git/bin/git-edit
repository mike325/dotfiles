#!/usr/bin/env bash

#
#                              -`
#              ...            .o+`
#           .+++s+   .h`.    `ooo/
#          `+++%++  .h+++   `+oooo:
#          +++o+++ .hhs++. `+oooooo:
#          +s%%so%.hohhoo'  'oooooo+:
#          `+ooohs+h+sh++`/:  ++oooo+:
#           hh+o+hoso+h+`/++++.+++++++:
#            `+h+++h.+ `/++++++++++++++:
#                     `/+++ooooooooooooo/`
#                    ./ooosssso++osssssso+`
#                   .oossssso-````/osssss::`
#                  -osssssso.      :ssss``to.
#                 :osssssss/  Mike  osssl   +
#                /ossssssss/   8a   +sssslb
#              `/ossssso+/:-        -:/+ossss'.-
#             `+sso+:-`                 `.-/+oso:
#            `++:.                           `-/+/
#            .`                                 `/

VERBOSE=0

NAME="$0"
NAME="${NAME##*/}"
NAME="${NAME##*-}"

EDITOR="${EDITOR:-vim}"
CACHED=""

SCRIPT_PATH="$0"
WORKTREE=""

SCRIPT_PATH="${SCRIPT_PATH%/*}"

if hash realpath 2>/dev/null; then
    SCRIPT_PATH=$(realpath "$SCRIPT_PATH")
else
    pushd "$SCRIPT_PATH" 1>/dev/null  || exit 1
    SCRIPT_PATH="$(pwd -P)"
    popd 1>/dev/null  || exit 1
fi

if [[ -n $ZSH_NAME ]]; then
    CURRENT_SHELL="zsh"
elif [[ -n $BASH ]]; then
    CURRENT_SHELL="bash"
else
    # shellcheck disable=SC2009,SC2046
    if [[ -z $CURRENT_SHELL ]]; then
        CURRENT_SHELL="${SHELL##*/}"
    fi
fi

function help_user() {
    cat <<EOF

Description:
    Quick edit modified files in a git repo

Usage:
    $NAME [OPTIONAL]

        Ex.
        $ git $NAME
        $ git $NAME -c    # just the staged files
        $ git $NAME -e ed # uses ed editor

    Optional Flags
        -c, --cached
            Edit just the staged files

        -e, --editor
            Change the default editor
                By default this uses \$EDITOR var and fallback vi in it's unset or empty

        -h, --help
            Display help, if you are seeing this, that means that you already know it (nice)
EOF
}

function __parse_args() {
    if [[ $# -lt 2 ]]; then
        echo ""
    fi

    local arg="$1"
    local name="$2"

    local pattern="^--${name}[=][a-zA-Z0-9._-/~]+$"

    if [[ -n $3 ]]; then
        local pattern="^--${name}[=]$3$"
    fi

    if [[ $arg =~ $pattern ]]; then
        local left_side="${arg#*=}"
        echo "${left_side/#\~/$HOME}"
    else
        echo "$arg"
    fi
}

function warn_msg() {
    local warn_message="$1"
    printf "[!]     ---- Warning!!! %s \n" "$warn_message"
}

function error_msg() {
    local error_message="$1"
    printf "[X]     ---- Error!!!   %s \n" "$error_message" 1>&2
}

function status_msg() {
    local status_message="$1"
    printf "[*]     ---- %s \n" "$status_message"
}

function verbose_msg() {
    if [[ $VERBOSE -eq 1 ]]; then
        local debug_message="$1"
        printf "[+]     ---- Debug!!!   %s \n" "$debug_message"
    fi
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
        --verbose)
            VERBOSE=1
            ;;
        -h | --help)
            help_user
            exit 0
            ;;
        -e | --editor)
            if [[ -z $2 ]]; then
                error_msg "No editor received"
                exit 1
            elif ! hash "$2" 2>/dev/null; then
                error_msg "Not a valid editor $2"
                exit 1
            fi
            EDITOR="$2"
            shift
            ;;
        -c | --cached)
            CACHED="--cached"
            ;;
        *)
            error_msg "Unknown argument $key"
            help_user
            exit 1
            ;;
    esac
    shift
done

# _GITDIR="$(git rev-parse --git-dir)"
IFS=$'\n' read -r -d '' -a worklist < <(git worktree list 2>/dev/null | awk '{print $1}')
for i in "${worklist[@]}"; do
    [[ $i == "$(  git rev-parse --show-toplevel)" ]] && WORKTREE="$i"
done

if [[ -n $CACHED ]]; then
    if [[ -n $WORKTREE ]]; then
        IFS=$'\n' read -r -d '' -a FILES < <(git --no-pager --work-tree="$WORKTREE" status --short | awk '{print $2}')
    else
        IFS=$'\n' read -r -d '' -a FILES < <(git --no-pager status --short | awk '{print $2}')
    fi
else
    if [[ -n $WORKTREE ]]; then
        IFS=$'\n' read -r -d '' -a FILES < <(git --no-pager --work-tree="$WORKTREE" status --short | awk '{print $2}')
    else
        IFS=$'\n' read -r -d '' -a FILES < <(git --no-pager status --short | awk '{print $2}')
    fi
fi

# shellcheck disable=SC2009,SC2046
if [[ -n ${FILES[0]} ]]; then
    "$EDITOR" "${FILES[@]}"
else
    warn_msg "No files to edit"
fi

exit 0
