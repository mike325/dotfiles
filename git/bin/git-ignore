#!/usr/bin/env bash

#   Author: Mike 8a
#   Description: Install all my basic configs and scripts
#
#                              -`
#              ...            .o+`
#           .+++s+   .h`.    `ooo/
#          `+++%++  .h+++   `+oooo:
#          +++o+++ .hhs++. `+oooooo:
#          +s%%so%.hohhoo'  'oooooo+:
#          `+ooohs+h+sh++`/:  ++oooo+:
#           hh+o+hoso+h+`/++++.+++++++:
#            `+h+++h.+ `/++++++++++++++:
#                     `/+++ooooooooooooo/`
#                    ./ooosssso++osssssso+`
#                   .oossssso-````/osssss::`
#                  -osssssso.      :ssss``to.
#                 :osssssss/  Mike  osssl   +
#                /ossssssss/   8a   +sssslb
#              `/ossssso+/:-        -:/+ossss'.-
#             `+sso+:-`                 `.-/+oso:
#            `++:.                           `-/+/
#            .`   github.com/mike325/dotfiles   `/

# Create useful gitignore files
# Usage: gi [param]
# param is a comma separated list of ignore profiles.
# If param is omitted choose interactively.
function help_user() {
    cat <<EOF

Description:
    Create or append git/rg/ag ignore file with www.gitignore.io API

Usage:
    $_NAME [OPTIONAL]

    Optional Flags

        -h, --help
            Display help, if you are seeing this, that means that you already know it (nice)

EOF
}

function warn_msg() {
    WARN_MESSAGE="$1"
    printf "[!]     ---- Warning!!! %s \n" "$WARN_MESSAGE"
}

function error_msg() {
    ERROR_MESSAGE="$1"
    printf "[X]     ---- Error!!!   %s \n" "$ERROR_MESSAGE" 1>&2
}

function status_msg() {
    STATUS_MESSAGGE="$1"
    printf "[*]     ---- %s \n" "$STATUS_MESSAGGE"
}

__gi() {
    if [[ $# -gt 0 ]]; then
        curl -Ls https://www.gitignore.io/api/"$*"
    else
        curl -Ls https://www.gitignore.io/api/list
    fi
}

if  [ "$#" -eq 0 ]; then

    gum_filter='gum filter --fuzzy --height=60 --width=0 --limit=1 --header "Select language"'
    fzf_filter='fzf --multi --ansi --exit-0  --height=60%'

    if hash fzf 2>/dev/null; then
        filter="$fzf_filter"
    elif hash gum 2>/dev/null; then
        filter="$gum_filter"
    else
        error_msg "Missing fzf and gum, cannot continue"
        exit 1
    fi

    IFS+=","
    for item in $(__gi list); do
        echo "$item"
    done | bash -c "$filter" | paste -s -d "," - |
        {
            read -r result && { [[ -n $result ]] && __gi "$result"; }
        }
else
    __gi "$@"
fi

exit 0
