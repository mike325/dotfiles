#!/usr/bin/env bash

#   Author: Awesome work from https://github.com/esc/git-stats
#   Description: Get statistics of the current git dir (CWD)
#
#                                     -`
#                     ...            .o+`
#                  .+++s+   .h`.    `ooo/
#                 `+++%++  .h+++   `+oooo:
#                 +++o+++ .hhs++. `+oooooo:
#                 +s%%so%.hohhoo'  'oooooo+:
#                 `+ooohs+h+sh++`/:  ++oooo+:
#                  hh+o+hoso+h+`/++++.+++++++:
#                   `+h+++h.+ `/++++++++++++++:
#                            `/+++ooooooooooooo/`
#                           ./ooosssso++osssssso+`
#                          .oossssso-````/osssss::`
#                         -osssssso.      :ssss``to.
#                        :osssssss/  Mike  osssl   +
#                       /ossssssss/   8a   +sssslb
#                     `/ossssso+/:-        -:/+ossss'.-
#                    `+sso+:-`                 `.-/+oso:
#                   `++:.                           `-/+/
#                   .`   github.com/mike325/dotfiles   `/

_NAME="$0"
_NAME="${_NAME##*/}"
_NAME="${_NAME##*-}"

function help_user() {
    cat << EOF

Description:
    Script to pull changes from a repository

    The script use git svn rebase and if it fails tries with git pull.
    It passes all the args to the git commands

    NOTE: Since I don't use git svn too much, if any argument is given to the script
          it will automatically switch to git pull

Usage:
    $_NAME [OPTIONAL]
        Ex.
        $ git $_NAME

    Optional Flags
        -h, --help
            Display help and exit. If you are seeing this, that means that you already know it (nice)

EOF
}

function __parse_args() {
    local arg="$1"
    local _NAME="$2"

    local pattern="^--${_NAME}[=][a-zA-Z0-9./]+$"
    if [[ -n "$3" ]]; then
        local pattern="^--${_NAME}[=]$3$"
    fi

    if [[ $arg =~ $pattern ]]; then
        local left_side="${arg#*=}"
        echo "$left_side"
    else
        echo "$arg"
    fi
}

function warn_msg() {
    WARN_MESSAGE="$1"
    printf "[!]     ---- Warning!!! %s \n" "$WARN_MESSAGE"
}

function error_msg() {
    ERROR_MESSAGE="$1"
    printf "[X]     ---- Error!!!   %s \n" "$ERROR_MESSAGE" 1>&2
}

function status_msg() {
    STATUS_MESSAGGE="$1"
    printf "[*]     ---- %s \n" "$STATUS_MESSAGGE"
}

function runGit() {
    local gitdir worktree
    gitdir="$(git rev-parse --git-dir)"
    if [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]]; then
        IFS=$'\n' read -r -d '' -a worklist < <(git worktree list 2>/dev/null | awk '{print $1}')
        for i in "${worklist[@]}"; do
            [[ "$i" == "$(git rev-parse --show-toplevel)" ]] && worktree="$i"
        done
    fi
    if [[ -n "$worktree" ]]; then
        if [[ -z "$1" ]]; then
            if hash git-svn 2>/dev/null && git --git-dir="$gitdir" --work-tree="$worktree" svn fetch 2>/dev/null; then
                git --git-dir="$gitdir" --work-tree="$worktree" svn rebase "$@"
            else
                git --git-dir="$gitdir" --work-tree="$worktree" pull "$@"
            fi
        else
            git --git-dir="$gitdir" --work-tree="$worktree" pull "$@"
        fi
    else
        if [[ -z "$1" ]] && hash git-svn 2>/dev/null; then
            if git --git-dir="$gitdir" svn fetch 2>/dev/null; then
                git --git-dir="$gitdir" svn rebase "$@"
            else
                git --git-dir="$gitdir" pull "$@"
            fi
        else
            git --git-dir="$gitdir" pull "$@"
        fi
    fi
}


for key in "$@"; do
    case "$key" in
        -h|--help)
            help_user
            exit 0
            ;;
    esac
done

runGit "$@"

exit 0
